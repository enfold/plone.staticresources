{"version":3,"file":"chunks/76059.676f425f960cc6c9ea34.min.js","mappings":"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","sources":["webpack://plone.staticresources/../mockup/src/pat/tinymce/js/links.js"],"sourcesContent":["import $ from \"jquery\";\nimport _ from \"underscore\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\n\nimport tinymce from \"tinymce/tinymce\";\nimport LinkTemplate from \"../templates/link.xml\";\nimport ImageTemplate from \"../templates/image.xml\";\nimport RelatedItems from \"../../relateditems/relateditems\";\nimport \"../../autotoc/autotoc\";\nimport \"../../modal/modal\";\nimport PatternUpload from \"../../upload/upload\";\n\nvar LinkType = Base.extend({\n    name: \"linktype\",\n    trigger: \".pat-linktype-dummy\",\n    defaults: {\n        linkModal: null, // required\n    },\n\n    init: function () {\n        this.linkModal = this.options.linkModal;\n        this.tinypattern = this.options.tinypattern;\n        this.tiny = this.tinypattern.tiny;\n        this.dom = this.tiny.dom;\n    },\n\n    getEl: function () {\n        return this.$el.find(\"input\");\n    },\n\n    value: function () {\n        return $.trim(this.getEl().val());\n    },\n\n    toUrl: function () {\n        return this.value();\n    },\n\n    load: function (element) {\n        this.getEl().attr(\"value\", this.tiny.dom.getAttrib(element, \"data-val\"));\n    },\n\n    set: function (val) {\n        var $el = this.getEl();\n        $el.attr(\"value\", val);\n        $el.val(val);\n    },\n\n    attributes: function () {\n        return {\n            \"data-val\": this.value(),\n        };\n    },\n    updateRelatedItems: function(){\n        debugger\n    },\n});\n\nvar ExternalLink = LinkType.extend({\n    name: \"externallinktype\",\n    trigger: \".pat-externallinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.getEl().on(\"change\", function () {\n            // check here if we should automatically add in http:// to url\n            var val = $(this).val();\n            if (new RegExp(\"https?://\").test(val)) {\n                // already valid url\n                return;\n            }\n            var domain = $(this).val().split(\"/\")[0];\n            if (domain.indexOf(\".\") !== -1) {\n                $(this).val(\"http://\" + val);\n            }\n        });\n    },\n});\n\nvar InternalLink = LinkType.extend({\n    name: \"internallinktype\",\n    trigger: \".pat-internallinktype-dummy\",\n    init: function () {\n        if (!this.getEl().length) {\n            return;\n        }\n        LinkType.prototype.init.call(this);\n        this.getEl().addClass(\"pat-relateditems\");\n        this.createRelatedItems();\n    },\n\n    getEl: function () {\n        return this.$el.find(\"input:not(.select2-input)\");\n    },\n\n    createRelatedItems: function () {\n        if (!this.getEl().length) {\n            return;\n        }\n        var options = this.linkModal.options.relatedItems;\n        options.upload = false; // ensure that related items upload is off.\n        this.relatedItems = new RelatedItems(this.getEl(), options);\n    },\n\n    updateRelatedItems: function(val) {\n        if(!this.relatedItems) {\n            // prevent toolbar from being rendered twice\n            this.createRelatedItems();\n        }\n        this.relatedItems.selectItem(val);\n    },\n\n    value: function () {\n        var val = this.getEl().select2(\"data\");\n        if (val && typeof val === \"object\") {\n            val = val[0];\n        }\n        return val;\n    },\n\n    toUrl: function () {\n        var value = this.value();\n        if (value) {\n            return this.tinypattern.generateUrl(value);\n        }\n        return null;\n    },\n    load: function (element) {\n        var val = this.tiny.dom.getAttrib(element, \"data-val\");\n        if (val) {\n            this.set(val);\n        }\n    },\n\n    set: function (val) {\n        var $el = this.getEl();\n        // kill it and then reinitialize since select2 will load data then\n        //$el.select2(\"destroy\");\n        //$el.removeData(\"pat-relateditems\"); // reset the pattern\n        //$el.parent().replaceWith($el);\n        $el.attr(\"value\", val);\n        $el.val(val);\n        this.updateRelatedItems(val);\n    },\n\n    attributes: function () {\n        var val = this.value();\n        if (val) {\n            return {\n                \"data-val\": val.UID,\n            };\n        }\n        return {};\n    },\n});\n\nvar UploadLink = LinkType.extend({\n    name: \"uploadlinktype\",\n    trigger: \".pat-uploadlinktype-dummy\",\n    /* need to do it a bit differently here.\n       when a user uploads and tries to upload from\n       it, you need to delegate to the real insert\n       linke types */\n    getDelegatedLinkType: function () {\n        if (this.linkModal.linkType === \"uploadImage\") {\n            return this.linkModal.linkTypes.image;\n        } else {\n            return this.linkModal.linkTypes.internal;\n        }\n    },\n    toUrl: function () {\n        return this.getDelegatedLinkType().toUrl();\n    },\n    attributes: function () {\n        return this.getDelegatedLinkType().attributes();\n    },\n    set: function (val) {\n        return this.getDelegatedLinkType().set(val);\n    },\n    load: function (element) {\n        return this.getDelegatedLinkType().load(element);\n    },\n    value: function () {\n        return this.getDelegatedLinkType().value();\n    },\n});\n\nvar ImageLink = InternalLink.extend({\n    name: \"imagelinktype\",\n    trigger: \".pat-imagelinktype-dummy\",\n    toUrl: function () {\n        var value = this.value();\n        return this.tinypattern.generateImageUrl(value, this.linkModal.$scale.val());\n    },\n});\n\nvar EmailLink = LinkType.extend({\n    name: \"emaillinktype\",\n    trigger: \".pat-emaillinktype-dummy\",\n    toUrl: function () {\n        var self = this;\n        var val = self.value();\n        if (val) {\n            var subject = self.getSubject();\n            var href = \"mailto:\" + val;\n            if (subject) {\n                href += \"?subject=\" + subject;\n            }\n            return href;\n        }\n        return null;\n    },\n\n    load: function (element) {\n        LinkType.prototype.load.apply(this, [element]);\n        this.linkModal.$subject.val(this.tiny.dom.getAttrib(element, \"data-subject\"));\n    },\n\n    getSubject: function () {\n        return this.linkModal.$subject.val();\n    },\n\n    attributes: function () {\n        var attribs = LinkType.prototype.attributes.call(this);\n        attribs[\"data-subject\"] = this.getSubject();\n        return attribs;\n    },\n});\n\nvar AnchorLink = LinkType.extend({\n    name: \"anchorlinktype\",\n    trigger: \".pat-anchorlinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.$select = this.$el.find(\"select\");\n        this.anchorNodes = [];\n        this.anchorData = [];\n        this.populate();\n    },\n\n    value: function () {\n        var val = this.$select.select2(\"data\");\n        if (val && typeof val === \"object\") {\n            val = val.id;\n        }\n        return val;\n    },\n\n    populate: function () {\n        var self = this;\n        self.$select.find(\"option\").remove();\n        self.anchorNodes = [];\n        self.anchorData = [];\n        var node, i, j, name, title;\n\n        var nodes = self.tiny.dom.select(\".mceItemAnchor,.mce-item-anchor\");\n        for (i = 0; i < nodes.length; i = i + 1) {\n            node = nodes[i];\n            name = self.tiny.dom.getAttrib(node, \"name\");\n            if (!name) {\n                name = self.tiny.dom.getAttrib(node, \"id\");\n            }\n            if (name !== \"\") {\n                self.anchorNodes.push(node);\n                self.anchorData.push({ name: name, title: name });\n            }\n        }\n\n        nodes = self.tiny.dom.select(self.linkModal.options.anchorSelector);\n        if (nodes.length > 0) {\n            for (i = 0; i < nodes.length; i = i + 1) {\n                node = nodes[i];\n                title = $(node)\n                    .text()\n                    .replace(/^\\s+|\\s+$/g, \"\");\n                if (title === \"\") {\n                    continue;\n                }\n                name = title.toLowerCase().substring(0, 1024);\n                name = name.replace(/[^a-z0-9]/g, \"-\");\n                /* okay, ugly, but we need to first check that this anchor isn't already available */\n                var found = false;\n                for (j = 0; j < self.anchorNodes.length; j = j + 1) {\n                    var anode = self.anchorData[j];\n                    if (anode.name === name) {\n                        found = true;\n                        // so it's also found, let's update the title to be more presentable\n                        anode.title = title;\n                        break;\n                    }\n                }\n                if (!found) {\n                    self.anchorData.push({\n                        name: name,\n                        title: title,\n                        newAnchor: true,\n                    });\n                    self.anchorNodes.push(node);\n                }\n            }\n        }\n        if (self.anchorNodes.length > 0) {\n            for (i = 0; i < self.anchorData.length; i = i + 1) {\n                var data = self.anchorData[i];\n                self.$select.append(\n                    '<option value=\"' + i + '\">' + data.title + \"</option>\"\n                );\n            }\n        } else {\n            self.$select.append(\"<option>No anchors found..</option>\");\n        }\n    },\n\n    getIndex: function (name) {\n        for (var i = 0; i < this.anchorData.length; i = i + 1) {\n            var data = this.anchorData[i];\n            if (data.name === name) {\n                return i;\n            }\n        }\n        return 0;\n    },\n\n    toUrl: function () {\n        var val = this.value();\n        if (val) {\n            var index = parseInt(val, 10);\n            var node = this.anchorNodes[index];\n            var data = this.anchorData[index];\n            if (data.newAnchor) {\n                node.innerHTML =\n                    '<a name=\"' +\n                    data.name +\n                    '\" class=\"mce-item-anchor\"></a>' +\n                    node.innerHTML;\n            }\n            return \"#\" + data.name;\n        }\n        return null;\n    },\n\n    set: function (val) {\n        var anchor = this.getIndex(val);\n        this.$select.select2(\"data\", \"\" + anchor);\n    },\n});\n\ntinymce.PluginManager.add(\"ploneimage\", function (editor) {\n    editor.ui.registry.addButton(\"ploneimage\", {\n        icon: \"image\",\n        text: \"Insert image\",\n        tooltip: \"Insert/edit image\",\n        onAction: editor.settings.addImageClicked,\n        // stateSelector: \"img:not([data-mce-object])\",\n    });\n});\n\n/* register the tinymce plugin */\ntinymce.PluginManager.add(\"plonelink\", function (editor) {\n    editor.ui.registry.addButton(\"plonelink\", {\n        icon: \"link\",\n        tooltip: \"Insert/edit link\",\n        shortcut: \"Ctrl+K\",\n        onAction: editor.settings.addLinkClicked,\n        stateSelector: \"a[href]\",\n    });\n\n    editor.ui.registry.addButton(\"unlink\", {\n        icon: \"unlink\",\n        tooltip: \"Remove link\",\n        onAction: function () {\n            editor.execCommand(\"unlink\");\n        },\n        stateSelector: \"a[href]\",\n    });\n\n    // editor.ui.registry.addButton(\"Ctrl+K\", \"\", editor.settings.addLinkClicked);\n\n    // editor.ui.registry.addButton(\"plonelink\", {\n    //     icon: \"link\",\n    //     text: \"Insert link\",\n    //     shortcut: \"Ctrl+K\",\n    //     onAction: editor.settings.addLinkClicked,\n    //     stateSelector: \"a[href]\",\n    //     context: \"insert\",\n    //     prependToContext: true,\n    // });\n});\n\nexport default Base.extend({\n    name: \"linkmodal\",\n    trigger: \".pat-linkmodal\",\n    defaults: {\n        anchorSelector: \"h1,h2,h3\",\n        linkTypes: [\n            /* available, none activate by default because these options\n         * only get merged, not set.\n        'internal',\n        'upload',\n        'external',\n        'email',\n        'anchor',\n        'image'\n        'externalImage'*/\n        ],\n        initialLinkType: \"internal\",\n        text: {\n            insertHeading: \"Insert Link\",\n        },\n        linkTypeClassMapping: {\n            internal: InternalLink,\n            upload: UploadLink,\n            external: ExternalLink,\n            email: EmailLink,\n            anchor: AnchorLink,\n            image: ImageLink,\n            uploadImage: UploadLink,\n            externalImage: LinkType,\n        },\n    },\n    // XXX: this is a temporary work around for having separated templates.\n    // Image modal is going to have its own modal class, funcs and template.\n    linkTypeTemplateMapping: {\n        internal: LinkTemplate,\n        upload: LinkTemplate,\n        external: LinkTemplate,\n        email: LinkTemplate,\n        anchor: LinkTemplate,\n        image: ImageTemplate,\n        uploadImage: ImageTemplate,\n        externalImage: ImageTemplate,\n    },\n\n    template: function (data) {\n        return _.template(this.linkTypeTemplateMapping[this.linkType])(data);\n    },\n\n    init: function () {\n        var self = this;\n        self.tinypattern = self.options.tinypattern;\n        if (self.tinypattern.options.anchorSelector) {\n            self.options.anchorSelector = self.tinypattern.options.anchorSelector;\n        }\n        self.tiny = self.tinypattern.tiny;\n        self.dom = self.tiny.dom;\n        self.linkType = self.options.initialLinkType;\n        self.linkTypes = {};\n        self.modal = registry.patterns[\"plone-modal\"].init(self.$el, {\n            html: self.generateModalHtml(),\n            content: null,\n            buttons: \".plone-btn\",\n            reloadWindowOnClose: false,\n            templateOptions: {\n                classDialog: \"modal-dialog modal-lg\",\n                reloadWindowOnClose: false,\n            },\n            actionOptions: {reloadWindowOnClose: false},\n            backdropOptions: { closeOnClick: false }\n        });\n        self.modal.on(\"shown\", (e) => {\n            self.modalShown.apply(self, [e]);\n        });\n    },\n\n    isOnlyTextSelected: function () {\n        /* pulled from TinyMCE link plugin */\n        var html = this.tiny.selection.getContent();\n\n        // Partial html and not a fully selected anchor element\n        if (\n            /</.test(html) &&\n            (!/^<a [^>]+>[^<]+<\\/a>$/.test(html) || html.indexOf(\"href=\") === -1)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElm) {\n            var nodes = this.anchorElm.childNodes,\n                i;\n\n            if (nodes.length === 0) {\n                return false;\n            }\n\n            for (var ii = nodes.length - 1; ii >= 0; ii--) {\n                if (nodes[ii].nodeType !== 3) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    },\n\n    generateModalHtml: function () {\n        return this.template({\n            options: this.options,\n            upload: this.options.upload,\n            text: this.options.text,\n            insertHeading: this.options.text.insertHeading,\n            insertImageHelp: this.options.text.insertImageHelp,\n            uploadText: this.options.text.upload,\n            insertLinkHelp: this.options.text.insertLinkHelp,\n            internal: this.options.text.internal,\n            external: this.options.text.external,\n            anchor: this.options.text.anchor,\n            anchorLabel: this.options.text.anchorLabel,\n            target: this.options.text.target,\n            linkTypes: this.options.linkTypes,\n            externalText: this.options.text.externalText,\n            emailText: this.options.text.email,\n            subjectText: this.options.text.subject,\n            targetList: this.options.targetList,\n            titleText: this.options.text.title,\n            internalImageText: this.options.text.internalImage,\n            externalImage: this.options.text.externalImage,\n            externalImageText: this.options.text.externalImageText,\n            altText: this.options.text.alt,\n            imageAlignText: this.options.text.imageAlign,\n            captionFromDescriptionText: this.options.text.captionFromDescription,\n            captionText: this.options.text.caption,\n            scaleText: this.options.text.scale,\n            imageScales: this.options.imageScales,\n            cancelBtn: this.options.text.cancelBtn,\n            insertBtn: this.options.text.insertBtn,\n        });\n    },\n\n    isImageMode: function () {\n        return [\"image\", \"uploadImage\", \"externalImage\"].indexOf(this.linkType) !== -1;\n    },\n\n    initElements: function () {\n        var self = this;\n        self.$target = $('select[name=\"target\"]', self.modal.$modal);\n        self.$button = $('.modal-footer input[name=\"insert\"]', self.modal.$modal);\n        self.$title = $('input[name=\"title\"]', self.modal.$modal);\n        self.$subject = $('input[name=\"subject\"]', self.modal.$modal);\n\n        self.$alt = $('input[name=\"alt\"]', self.modal.$modal);\n        self.$align = $('select[name=\"align\"]', self.modal.$modal);\n        self.$scale = $('select[name=\"scale\"]', self.modal.$modal);\n        self.$captionFromDescription = $(\n            'input[name=\"captionFromDescription\"]',\n            self.modal.$modal\n        );\n        self.$caption = $('textarea[name=\"caption\"]', self.modal.$modal);\n\n        /* load up all the link types */\n        _.each(self.options.linkTypes, function (type) {\n            var $container = $(\".linkType.\" + type + \" .main\", self.modal.$modal);\n            if ($container.length) {\n                self.linkTypes[type] = new self.options.linkTypeClassMapping[type](\n                    $container,\n                    {\n                        linkModal: self,\n                        tinypattern: self.tinypattern,\n                    }\n                );\n            }\n        });\n\n        $(\".autotoc-nav a\", self.modal.$modal).click(function () {\n            var $fieldset = $(\"fieldset.linkType\", self.modal.$modal).eq(\n                $(this).index()\n            );\n            var classes = $fieldset[0].className.split(/\\s+/);\n            _.each(classes, function (val) {\n                if (_.indexOf(self.options.linkTypes, val) !== -1) {\n                    self.linkType = val;\n                }\n            });\n        });\n\n        self.$captionFromDescription.change(function () {\n            if (this.checked) {\n                self.$caption.prop(\"disabled\", true);\n            } else {\n                self.$caption.prop(\"disabled\", false);\n            }\n        });\n    },\n\n    getLinkUrl: function () {\n        // get the url, only get one uid\n        return this.linkTypes[this.linkType].toUrl();\n    },\n\n    getValue: function () {\n        return this.linkTypes[this.linkType].value();\n    },\n\n    updateAnchor: function (href) {\n        var self = this;\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n\n        var target = self.$target.val();\n        var title = self.$title.val();\n        var linkAttrs = $.extend(\n            true,\n            self.data,\n            {\n                \"title\": title ? title : null,\n                \"target\": target ? target : null,\n                \"data-linkType\": self.linkType,\n                \"href\": href,\n            },\n            self.linkTypes[self.linkType].attributes()\n        );\n        if (self.anchorElm) {\n            if (self.onlyText && linkAttrs.text !== self.initialText) {\n                if (\"innerText\" in self.anchorElm) {\n                    self.anchorElm.innerText = self.data.text;\n                } else {\n                    self.anchorElm.textContent = self.data.text;\n                }\n            }\n\n            self.tiny.dom.setAttribs(self.anchorElm, linkAttrs);\n\n            self.tiny.selection.select(self.anchorElm);\n            self.tiny.undoManager.add();\n        } else {\n            if (self.onlyText) {\n                self.tiny.insertContent(\n                    self.tiny.dom.createHTML(\n                        \"a\",\n                        linkAttrs,\n                        self.tiny.dom.encode(self.data.text)\n                    )\n                );\n            } else {\n                self.tiny.execCommand(\"mceInsertLink\", false, linkAttrs);\n            }\n        }\n    },\n\n    focusElement: function (elm) {\n        this.tiny.focus();\n        this.tiny.selection.select(elm);\n        this.tiny.nodeChanged();\n    },\n\n    updateImage: function (src) {\n        var self = this;\n        var title = self.$title.val();\n        var captionFromDescription = self.$captionFromDescription.prop(\"checked\");\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n\n        var cssclasses = [\"image-richtext\", self.$align.val()];\n        if (captionFromDescription) {\n            cssclasses.push(\"captioned\");\n        }\n\n        var data = $.extend(\n            true,\n            {},\n            {\n                \"src\": src,\n                \"title\": title ? title : null,\n                \"alt\": self.$alt.val(),\n                \"class\": cssclasses.join(\" \"),\n                \"data-linkType\": self.linkType,\n                \"data-scale\": self.$scale.val(),\n            },\n            self.linkTypes[self.linkType].attributes()\n        );\n        if (self.imgElm && !self.imgElm.getAttribute(\"data-mce-object\")) {\n            data.width = self.dom.getAttrib(self.imgElm, \"width\");\n            data.height = self.dom.getAttrib(self.imgElm, \"height\");\n        } else {\n            self.imgElm = null;\n        }\n\n        function waitLoad(imgElm) {\n            imgElm.onload = imgElm.onerror = function () {\n                imgElm.onload = imgElm.onerror = null;\n                self.focusElement(imgElm);\n            };\n        }\n\n        if (self.imgElm) {\n            self.dom.remove(self.imgElm);\n        }\n        if (self.captionElm) {\n            self.dom.remove(self.captionElm);\n        }\n        if (self.figureElm) {\n            self.dom.remove(self.figureElm);\n        }\n\n        data.id = \"__mcenew\";\n        var html_inner = self.dom.createHTML(\"img\", data);\n        var caption = self.$caption.val();\n        var html_string;\n        if (caption && !captionFromDescription) {\n            html_inner += \"\\n\" + self.dom.createHTML(\"figcaption\", {}, caption);\n            //html_inner += '\\n' + self.dom.createHTML('figcaption', { class: 'mceNonEditable' }, caption);\n            html_string = self.dom.createHTML(\"figure\", {}, html_inner);\n        } else {\n            html_string = html_inner;\n        }\n        self.tiny.insertContent(html_string);\n        self.imgElm = self.dom.get(\"__mcenew\");\n        self.dom.setAttrib(self.imgElm, \"id\", null);\n\n        waitLoad(self.imgElm);\n        if (self.imgElm.complete) {\n            self.focusElement(self.imgElm);\n        }\n    },\n\n    modalShown: function (e) {\n        var self = this;\n        self.initElements();\n        self.initData();\n        // upload init\n        if (self.options.upload) {\n            self.$upload = $(\".uploadify-me\", self.modal.$modal);\n            self.options.upload.relatedItems = $.extend(\n                true,\n                {},\n                self.options.relatedItems\n            );\n            self.options.upload.relatedItems.selectableTypes = self.options.folderTypes;\n            self.$upload.addClass(\"pat-upload\");\n            new PatternUpload(self.$upload, self.options.upload);\n            self.$upload.on(\"uploadAllCompleted\", function(evt, data) {\n                if (self.linkTypes.image) {\n                    self.linkTypes.image.set(data.data.UID);\n                    $(\n                        \"#\" + $(\"#tinylink-image\", self.modal.$modal).data(\"navref\")\n                    ).trigger(\"click\");\n                } else {\n                    self.linkTypes.internal.set(data.data.UID);\n                    $(\n                        \"#\" + $(\"#tinylink-internal\", self.modal.$modal).data(\"navref\")\n                    ).trigger(\"click\");\n                }\n            }.bind(self));\n        }\n\n        self.$button.off(\"click\").on(\"click\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.linkType = self.modal.$modal.find(\"fieldset.active\").data(\"linktype\");\n\n            if (self.linkType === \"uploadImage\" || self.linkType === \"upload\") {\n                var patUpload = self.$upload.data().patternUpload;\n                if (patUpload.dropzone.files.length > 0) {\n                    patUpload.processUpload();\n                    self.$upload.on(\"uploadAllCompleted\", function (evt, data) {\n                        var counter = 0;\n                        var checkUpload = function () {\n                            if (counter < 5 && !self.linkTypes[self.linkType].value()) {\n                                counter += 1;\n                                setTimeout(checkUpload, 100);\n                                return;\n                            } else {\n                                var href = self.getLinkUrl();\n                                self.updateImage(href);\n                                self.hide();\n                            }\n                        };\n                        checkUpload();\n                    });\n                }\n            }\n            var href;\n            try {\n                href = self.getLinkUrl();\n            } catch (error) {\n                return; // just cut out if no url\n            }\n            if (!href) {\n                return; // just cut out if no url\n            }\n            if (self.isImageMode()) {\n                self.updateImage(href);\n            } else {\n                /* regular anchor */\n                self.updateAnchor(href);\n            }\n            self.hide();\n        });\n        $('.modal-footer input[name=\"cancel\"]', self.modal.$modal).click(function (e) {\n            e.preventDefault();\n            self.hide();\n        });\n    },\n\n    show: function () {\n        this.modal.show();\n    },\n\n    hide: function () {\n        this.modal.hide();\n    },\n\n    initData: function () {\n        var self = this;\n\n        self.data = {};\n        // get selection BEFORE..\n        // This is pulled from TinyMCE link plugin\n        self.initialText = null;\n        var value;\n        self.rng = self.tiny.selection.getRng();\n        self.selectedElm = self.tiny.selection.getNode();\n        self.anchorElm = self.tiny.dom.getParent(self.selectedElm, \"a[href]\");\n        self.onlyText = self.isOnlyTextSelected();\n\n        self.data.text = self.initialText = self.anchorElm\n            ? self.anchorElm.innerText || self.anchorElm.textContent\n            : self.tiny.selection.getContent({ format: \"text\" });\n        self.data.href = self.anchorElm\n            ? self.tiny.dom.getAttrib(self.anchorElm, \"href\")\n            : \"\";\n\n        if (self.anchorElm) {\n            self.data.target = self.tiny.dom.getAttrib(self.anchorElm, \"target\");\n        } else if (self.tiny.settings.default_link_target) {\n            self.data.target = self.tiny.settings.default_link_target;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"rel\"))) {\n            self.data.rel = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"class\"))) {\n            self.data[\"class\"] = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"title\"))) {\n            self.data.title = value;\n        }\n\n        self.tiny.focus();\n        self.anchorElm = self.dom.getParent(self.selectedElm, \"a[href]\");\n\n        var linkType;\n        if (self.isImageMode()) {\n            var figure;\n            var img;\n            var caption;\n            if (self.selectedElm.nodeName === \"FIGURE\") {\n                figure = self.selectedElm;\n                img = figure.querySelector(\"img\");\n                caption = figure.querySelector(\"figcaption\");\n            } else if (self.selectedElm.nodeName === \"IMG\") {\n                figure = $(self.selectedElm).closest(\"figure\");\n                figure = figure.length ? figure[0] : undefined;\n                img = self.selectedElm;\n                caption = figure ? figure.querySelector(\"figcaption\") : undefined;\n            } else if (self.selectedElm.nodeName === \"FIGCAPTION\") {\n                figure = $(self.selectedElm).closest(\"figure\");\n                figure = figure.length ? figure[0] : undefined;\n                img = figure ? figure.querySelector(\"img\") : undefined;\n                caption = self.selectedElm;\n            }\n\n            self.imgElm = img;\n            self.figureElm = figure;\n            self.captionElm = caption;\n\n            if (self.imgElm) {\n                var src = self.dom.getAttrib(self.imgElm, \"src\");\n                self.$title.val(self.dom.getAttrib(self.imgElm, \"title\"));\n                self.$alt.val(self.dom.getAttrib(self.imgElm, \"alt\"));\n\n                if ($(self.imgElm).hasClass(\"captioned\")) {\n                    self.$captionFromDescription.prop(\"checked\", true);\n                    self.$caption.prop(\"disabled\", true);\n                }\n                if (self.captionElm) {\n                    self.$caption.val(self.captionElm.innerHTML);\n                }\n\n                linkType = self.dom.getAttrib(self.imgElm, \"data-linktype\");\n                if (linkType) {\n                    self.linkType = linkType;\n                    self.linkTypes[self.linkType].load(self.imgElm);\n                    var scale = self.dom.getAttrib(self.imgElm, \"data-scale\");\n                    self.$scale.val(scale);\n                    $(\"#tinylink-\" + self.linkType, self.modal.$modal).trigger(\"click\");\n                } else if (src) {\n                    self.guessImageLink(src);\n                }\n                var className = self.dom.getAttrib(self.imgElm, \"class\");\n                var klasses = className.split(\" \");\n                for (var i = 0; i < klasses.length; i = i + 1) {\n                    var klass = klasses[i];\n                    for (var availClass in self.options.imageClasses) {\n                        if (availClass.indexOf(klass) !== -1) {\n                            self.$align.val(klass);\n                        }\n                    }\n                }\n            }\n        } else if (self.anchorElm) {\n            self.focusElement(self.anchorElm);\n            var href = \"\";\n            href = self.dom.getAttrib(self.anchorElm, \"href\");\n            self.$target.val(self.dom.getAttrib(self.anchorElm, \"target\"));\n            self.$title.val(self.dom.getAttrib(self.anchorElm, \"title\"));\n            linkType = self.dom.getAttrib(self.anchorElm, \"data-linktype\");\n            if (linkType) {\n                self.linkType = linkType;\n                self.linkTypes[self.linkType].load(self.anchorElm);\n                var $panel = $(\"#tinylink-\" + self.linkType, self.modal.$modal);\n                // $('#tinylink-' + self.linkType, self.modal.$modal).trigger('click');\n                if ($panel.length === 1) {\n                    $(\"#\" + $panel.data(\"autotoc-trigger-id\")).trigger(\"click\");\n                }\n            } else if (href) {\n                self.guessAnchorLink(href);\n            }\n        }\n    },\n\n    guessImageLink: function (src) {\n        if (src.indexOf(this.options.prependToScalePart) !== -1) {\n            this.linkType = \"image\";\n            this.$scale.val(this.tinypattern.getScaleFromUrl(src));\n            this.linkTypes.image.set(this.tinypattern.stripGeneratedUrl(src));\n        } else {\n            this.linkType = \"externalImage\";\n            this.linkTypes.externalImage.set(src);\n        }\n    },\n\n    guessAnchorLink: function (href) {\n        if (\n            this.options.prependToUrl &&\n            href.indexOf(this.options.prependToUrl) !== -1\n        ) {\n            // XXX if using default configuration, it gets more difficult\n            // here to detect internal urls so this might need to change...\n            this.linkType = \"internal\";\n            this.linkTypes.internal.set(this.tinypattern.stripGeneratedUrl(href));\n        } else if (href.indexOf(\"mailto:\") !== -1) {\n            this.linkType = \"email\";\n            var email = href.substring(\"mailto:\".length, href.length);\n            var split = email.split(\"?subject=\");\n            this.linkTypes.email.set(split[0]);\n            if (split.length > 1) {\n                this.$subject.val(decodeURIComponent(split[1]));\n            }\n        } else if (href[0] === \"#\") {\n            this.linkType = \"anchor\";\n            this.linkTypes.anchor.set(href.substring(1));\n        } else {\n            this.linkType = \"external\";\n            this.linkTypes.external.set(href);\n        }\n    },\n\n    setSelectElement: function ($el, val) {\n        $el.find(\"option:selected\").prop(\"selected\", false);\n        if (val) {\n            // update\n            $el.find('option[value=\"' + val + '\"]').prop(\"selected\", true);\n        }\n    },\n\n    reinitialize: function () {\n        /*\n         * This will probably be called before show is run.\n         * It will overwrite the base html template given to\n         * be able to privde default values for the overlay\n         */\n        this.modal.options.html = this.generateModalHtml();\n    },\n});\n"],"names":["LinkType","Base","name","trigger","defaults","linkModal","init","this","options","tinypattern","tiny","dom","getEl","$el","find","value","$","val","toUrl","load","element","attr","getAttrib","set","attributes","updateRelatedItems","ExternalLink","extend","prototype","call","on","RegExp","test","split","indexOf","InternalLink","length","addClass","createRelatedItems","relatedItems","upload","RelatedItems","selectItem","select2","generateUrl","UID","UploadLink","getDelegatedLinkType","linkType","linkTypes","image","internal","ImageLink","generateImageUrl","$scale","EmailLink","subject","getSubject","href","apply","$subject","attribs","AnchorLink","$select","anchorNodes","anchorData","populate","id","node","i","j","title","self","remove","nodes","select","push","anchorSelector","text","replace","toLowerCase","substring","found","anode","newAnchor","data","append","getIndex","index","parseInt","innerHTML","anchor","tinymce","editor","ui","registry","addButton","icon","tooltip","onAction","settings","addImageClicked","shortcut","addLinkClicked","stateSelector","execCommand","initialLinkType","insertHeading","linkTypeClassMapping","external","email","uploadImage","externalImage","linkTypeTemplateMapping","LinkTemplate","ImageTemplate","template","_","modal","html","generateModalHtml","content","buttons","reloadWindowOnClose","templateOptions","classDialog","actionOptions","backdropOptions","closeOnClick","e","modalShown","isOnlyTextSelected","selection","getContent","anchorElm","childNodes","ii","nodeType","insertImageHelp","uploadText","insertLinkHelp","anchorLabel","target","externalText","emailText","subjectText","targetList","titleText","internalImageText","internalImage","externalImageText","altText","alt","imageAlignText","imageAlign","captionFromDescriptionText","captionFromDescription","captionText","caption","scaleText","scale","imageScales","cancelBtn","insertBtn","isImageMode","initElements","$target","$modal","$button","$title","$alt","$align","$captionFromDescription","$caption","type","$container","click","classes","eq","className","change","checked","prop","getLinkUrl","getValue","updateAnchor","focus","setRng","rng","linkAttrs","onlyText","initialText","innerText","textContent","setAttribs","undoManager","add","insertContent","createHTML","encode","focusElement","elm","nodeChanged","updateImage","src","cssclasses","join","imgElm","getAttribute","width","height","captionElm","figureElm","html_string","html_inner","get","setAttrib","onload","onerror","complete","initData","$upload","selectableTypes","folderTypes","PatternUpload","evt","bind","off","preventDefault","stopPropagation","patUpload","patternUpload","dropzone","files","processUpload","counter","checkUpload","setTimeout","hide","error","show","figure","img","getRng","selectedElm","getNode","getParent","format","default_link_target","rel","nodeName","querySelector","closest","undefined","hasClass","guessImageLink","klasses","klass","availClass","imageClasses","$panel","guessAnchorLink","prependToScalePart","getScaleFromUrl","stripGeneratedUrl","prependToUrl","decodeURIComponent","setSelectElement","reinitialize"],"sourceRoot":""}